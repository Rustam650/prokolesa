# Generated by Django 5.2.2 on 2025-06-22 13:24

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Brand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('logo', models.ImageField(blank=True, null=True, upload_to='brands/', verbose_name='logo')),
                ('website', models.URLField(blank=True, verbose_name='website')),
                ('product_types', models.CharField(choices=[('tire', 'Шины'), ('wheel', 'Диски'), ('both', 'Шины и диски'), ('accessory', 'Аксессуары')], default='both', max_length=20, verbose_name='product types')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='rating')),
                ('popularity_score', models.PositiveIntegerField(default=0, verbose_name='popularity score')),
                ('country', models.CharField(blank=True, max_length=100, verbose_name='country')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
            ],
            options={
                'verbose_name': 'Brand',
                'verbose_name_plural': 'Brands',
                'ordering': ['-popularity_score', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('slug', models.SlugField(max_length=100, unique=True, verbose_name='slug')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('image', models.ImageField(blank=True, null=True, upload_to='categories/', verbose_name='image')),
                ('icon', models.CharField(blank=True, help_text='CSS class для иконки', max_length=50, verbose_name='icon')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='meta title')),
                ('meta_description', models.TextField(blank=True, verbose_name='meta description')),
                ('meta_keywords', models.CharField(blank=True, max_length=500, verbose_name='meta keywords')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='children', to='products.category')),
            ],
            options={
                'verbose_name': 'Category',
                'verbose_name_plural': 'Categories',
                'ordering': ['sort_order', 'name'],
            },
        ),
        migrations.CreateModel(
            name='ProductImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('object_id', models.PositiveIntegerField()),
                ('image', models.ImageField(upload_to='products/', verbose_name='image')),
                ('alt_text', models.CharField(blank=True, max_length=200, verbose_name='alt text')),
                ('title', models.CharField(blank=True, max_length=200, verbose_name='title')),
                ('is_main', models.BooleanField(default=False, verbose_name='is main')),
                ('sort_order', models.PositiveIntegerField(default=0, verbose_name='sort order')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype')),
            ],
            options={
                'verbose_name': 'Product Image',
                'verbose_name_plural': 'Product Images',
                'ordering': ['sort_order', 'created_at'],
            },
        ),
        migrations.CreateModel(
            name='TireProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='slug')),
                ('sku', models.CharField(max_length=50, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, max_length=50, verbose_name='barcode')),
                ('season', models.CharField(choices=[('summer', 'Летние'), ('winter', 'Зимние'), ('all_season', 'Всесезонные')], max_length=20, verbose_name='season')),
                ('short_description', models.TextField(blank=True, max_length=500, verbose_name='short description')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('specifications', models.JSONField(blank=True, default=dict, verbose_name='specifications')),
                ('width', models.PositiveIntegerField(help_text='Ширина в мм', verbose_name='width')),
                ('profile', models.PositiveIntegerField(help_text='Высота профиля в %', verbose_name='profile')),
                ('diameter', models.PositiveIntegerField(help_text='Диаметр в дюймах', verbose_name='diameter')),
                ('load_index', models.CharField(max_length=10, verbose_name='load index')),
                ('speed_index', models.CharField(max_length=5, verbose_name='speed index')),
                ('tread_pattern', models.CharField(blank=True, max_length=100, verbose_name='tread pattern')),
                ('sidewall_type', models.CharField(blank=True, max_length=50, verbose_name='sidewall type')),
                ('run_flat', models.BooleanField(default=False, verbose_name='run flat')),
                ('reinforced', models.BooleanField(default=False, verbose_name='reinforced')),
                ('studded', models.BooleanField(default=False, verbose_name='studded')),
                ('fuel_efficiency', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G')], max_length=1, verbose_name='fuel efficiency')),
                ('wet_grip', models.CharField(blank=True, choices=[('A', 'A'), ('B', 'B'), ('C', 'C'), ('D', 'D'), ('E', 'E'), ('F', 'F'), ('G', 'G')], max_length=1, verbose_name='wet grip')),
                ('noise_level', models.PositiveIntegerField(blank=True, help_text='дБ', null=True, verbose_name='noise level')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='price')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='old price')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='cost price')),
                ('discount_percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='discount percent')),
                ('stock_quantity', models.PositiveIntegerField(default=0, verbose_name='stock quantity')),
                ('min_stock_level', models.PositiveIntegerField(default=5, verbose_name='min stock level')),
                ('max_stock_level', models.PositiveIntegerField(default=1000, verbose_name='max stock level')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='weight')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='is bestseller')),
                ('is_new', models.BooleanField(default=False, verbose_name='is new')),
                ('is_on_sale', models.BooleanField(default=False, verbose_name='is on sale')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='rating')),
                ('reviews_count', models.PositiveIntegerField(default=0, verbose_name='reviews count')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='views count')),
                ('sales_count', models.PositiveIntegerField(default=0, verbose_name='sales count')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='meta title')),
                ('meta_description', models.TextField(blank=True, verbose_name='meta description')),
                ('meta_keywords', models.CharField(blank=True, max_length=500, verbose_name='meta keywords')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tire_products', to='products.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='tire_products', to='products.category')),
            ],
            options={
                'verbose_name': 'Tire Product',
                'verbose_name_plural': 'Tire Products',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', 'season'], name='products_ti_is_acti_830dbf_idx'), models.Index(fields=['brand', 'category'], name='products_ti_brand_i_048691_idx'), models.Index(fields=['price'], name='products_ti_price_93dd4a_idx'), models.Index(fields=['-rating'], name='products_ti_rating_c14a38_idx'), models.Index(fields=['width', 'profile', 'diameter'], name='products_ti_width_c0a451_idx')],
            },
        ),
        migrations.CreateModel(
            name='WheelProduct',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200, verbose_name='name')),
                ('slug', models.SlugField(max_length=200, unique=True, verbose_name='slug')),
                ('sku', models.CharField(max_length=50, unique=True, verbose_name='SKU')),
                ('barcode', models.CharField(blank=True, max_length=50, verbose_name='barcode')),
                ('short_description', models.TextField(blank=True, max_length=500, verbose_name='short description')),
                ('description', models.TextField(blank=True, verbose_name='description')),
                ('specifications', models.JSONField(blank=True, default=dict, verbose_name='specifications')),
                ('diameter', models.DecimalField(decimal_places=1, help_text='Диаметр в дюймах', max_digits=4, verbose_name='diameter')),
                ('width', models.DecimalField(decimal_places=1, help_text='Ширина в дюймах', max_digits=4, verbose_name='width')),
                ('bolt_pattern', models.CharField(help_text='Например: 5x114.3', max_length=20, verbose_name='bolt pattern')),
                ('center_bore', models.DecimalField(decimal_places=1, help_text='Диаметр центрального отверстия в мм', max_digits=5, verbose_name='center bore')),
                ('offset', models.IntegerField(help_text='Вылет в мм', verbose_name='offset')),
                ('wheel_type', models.CharField(choices=[('alloy', 'Литые'), ('steel', 'Штампованные'), ('forged', 'Кованые'), ('carbon', 'Карбоновые')], max_length=20, verbose_name='wheel type')),
                ('material', models.CharField(blank=True, max_length=100, verbose_name='material')),
                ('color', models.CharField(default='#FFFFFF', max_length=7, verbose_name='color')),
                ('finish', models.CharField(blank=True, help_text='Тип покрытия', max_length=100, verbose_name='finish')),
                ('compatible_cars', models.JSONField(blank=True, default=list, verbose_name='compatible cars')),
                ('price', models.DecimalField(decimal_places=2, max_digits=10, verbose_name='price')),
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='old price')),
                ('cost_price', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True, verbose_name='cost price')),
                ('discount_percent', models.PositiveIntegerField(default=0, validators=[django.core.validators.MaxValueValidator(100)], verbose_name='discount percent')),
                ('stock_quantity', models.PositiveIntegerField(default=0, verbose_name='stock quantity')),
                ('min_stock_level', models.PositiveIntegerField(default=5, verbose_name='min stock level')),
                ('max_stock_level', models.PositiveIntegerField(default=1000, verbose_name='max stock level')),
                ('weight', models.DecimalField(blank=True, decimal_places=3, max_digits=8, null=True, verbose_name='weight')),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_featured', models.BooleanField(default=False, verbose_name='is featured')),
                ('is_bestseller', models.BooleanField(default=False, verbose_name='is bestseller')),
                ('is_new', models.BooleanField(default=False, verbose_name='is new')),
                ('is_on_sale', models.BooleanField(default=False, verbose_name='is on sale')),
                ('rating', models.DecimalField(decimal_places=2, default=0, max_digits=3, verbose_name='rating')),
                ('reviews_count', models.PositiveIntegerField(default=0, verbose_name='reviews count')),
                ('views_count', models.PositiveIntegerField(default=0, verbose_name='views count')),
                ('sales_count', models.PositiveIntegerField(default=0, verbose_name='sales count')),
                ('meta_title', models.CharField(blank=True, max_length=200, verbose_name='meta title')),
                ('meta_description', models.TextField(blank=True, verbose_name='meta description')),
                ('meta_keywords', models.CharField(blank=True, max_length=500, verbose_name='meta keywords')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('brand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wheel_products', to='products.brand')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='wheel_products', to='products.category')),
            ],
            options={
                'verbose_name': 'Wheel Product',
                'verbose_name_plural': 'Wheel Products',
                'ordering': ['-created_at'],
                'indexes': [models.Index(fields=['is_active', 'wheel_type'], name='products_wh_is_acti_851a99_idx'), models.Index(fields=['brand', 'category'], name='products_wh_brand_i_b46eda_idx'), models.Index(fields=['price'], name='products_wh_price_7ca6b5_idx'), models.Index(fields=['-rating'], name='products_wh_rating_4d3fd0_idx'), models.Index(fields=['diameter', 'width'], name='products_wh_diamete_f12be3_idx')],
            },
        ),
    ]
