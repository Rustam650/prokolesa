# Generated by Django 5.2.2 on 2025-06-04 19:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('phone', models.CharField(blank=True, max_length=20, null=True, verbose_name='phone number')),
                ('birth_date', models.DateField(blank=True, null=True, verbose_name='birth date')),
                ('gender', models.CharField(blank=True, choices=[('M', 'Мужской'), ('F', 'Женский'), ('O', 'Другой')], max_length=1, verbose_name='gender')),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars/', verbose_name='avatar')),
                ('city', models.CharField(blank=True, max_length=100, verbose_name='city')),
                ('address', models.TextField(blank=True, verbose_name='address')),
                ('postal_code', models.CharField(blank=True, max_length=20, verbose_name='postal code')),
                ('email_notifications', models.BooleanField(default=True, verbose_name='email notifications')),
                ('sms_notifications', models.BooleanField(default=False, verbose_name='SMS notifications')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='push notifications')),
                ('loyalty_points', models.PositiveIntegerField(default=0, verbose_name='loyalty points')),
                ('total_spent', models.DecimalField(decimal_places=2, default=0, max_digits=10, verbose_name='total spent')),
                ('is_verified', models.BooleanField(default=False, verbose_name='is verified')),
                ('verification_token', models.CharField(blank=True, max_length=100, verbose_name='verification token')),
                ('last_activity', models.DateTimeField(auto_now=True, verbose_name='last activity')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'ordering': ['-created_at'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Address',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(choices=[('home', 'Домашний'), ('work', 'Рабочий'), ('other', 'Другой')], default='home', max_length=10, verbose_name='address type')),
                ('title', models.CharField(max_length=100, verbose_name='title')),
                ('country', models.CharField(default='Россия', max_length=100, verbose_name='country')),
                ('region', models.CharField(max_length=100, verbose_name='region')),
                ('city', models.CharField(max_length=100, verbose_name='city')),
                ('street', models.CharField(max_length=200, verbose_name='street')),
                ('house', models.CharField(max_length=20, verbose_name='house')),
                ('apartment', models.CharField(blank=True, max_length=20, verbose_name='apartment')),
                ('postal_code', models.CharField(max_length=20, verbose_name='postal code')),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='latitude')),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True, verbose_name='longitude')),
                ('is_default', models.BooleanField(default=False, verbose_name='is default')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='addresses', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Address',
                'verbose_name_plural': 'Addresses',
                'ordering': ['-is_default', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('car_make', models.CharField(blank=True, max_length=50, verbose_name='car make')),
                ('car_model', models.CharField(blank=True, max_length=50, verbose_name='car model')),
                ('car_year', models.PositiveIntegerField(blank=True, null=True, verbose_name='car year')),
                ('tire_size', models.CharField(blank=True, max_length=20, verbose_name='tire size')),
                ('wheel_size', models.CharField(blank=True, max_length=20, verbose_name='wheel size')),
                ('preferred_brands', models.JSONField(blank=True, default=list, verbose_name='preferred brands')),
                ('price_range_min', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='min price range')),
                ('price_range_max', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='max price range')),
                ('telegram_id', models.CharField(blank=True, max_length=50, verbose_name='Telegram ID')),
                ('vk_id', models.CharField(blank=True, max_length=50, verbose_name='VK ID')),
                ('theme_preference', models.CharField(choices=[('light', 'Светлая'), ('dark', 'Темная'), ('auto', 'Авто')], default='auto', max_length=10, verbose_name='theme preference')),
                ('language', models.CharField(default='ru', max_length=10, verbose_name='language')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='updated at')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
            },
        ),
    ]
